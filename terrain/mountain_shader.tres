[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]

[sub_resource type="VisualShaderNodeIf" id=2]
default_input_values = [ 0, 0.8, 1, 0.75, 2, 0.0, 3, Vector3( 1, 0, 1 ), 4, Vector3( 1, 0, 0 ), 5, Vector3( 0, 0, 1 ) ]

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.195313, 0.195313, 0.195313, 1 )

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=9]

[sub_resource type="VisualShaderNodeExpression" id=21]
size = Vector2( 285, 180 )
expression = "res = slopeGradient"

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
function = 12

[sub_resource type="VisualShaderNodeIf" id=13]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 10.0, 2, 0.0, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.61475, 0.376667, 0.252509, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=15]
constant = Color( 0.194531, 0.464844, 0.128922, 1 )

[sub_resource type="VisualShaderNodeIf" id=16]
default_input_values = [ 0, 0.0, 1, 20.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeGlobalExpression" id=17]
size = Vector2( 733, 133 )
expression = "varying float slopeGradient;"

[sub_resource type="VisualShaderNodeExpression" id=18]
size = Vector2( 714, 313 )
expression = "vec3 worldNormal = vec3(0.0, 1.0, 0.0);
slopeGradient = dot(vec4(vec4(worldNormal, 1.0) * world).xyz, normal);

result = normal;"

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "world"

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "normal"

[resource]
code = "shader_type spatial;


// GlobalExpression:0
	varying float slopeGradient;

void vertex() {
// Input:4
	mat4 n_out4p0 = WORLD_MATRIX;

// Input:5
	vec3 n_out5p0 = NORMAL;

// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 worldNormal = vec3(0.0, 1.0, 0.0);
		slopeGradient = dot(vec4(vec4(worldNormal, 1.0) * n_out4p0).xyz, n_out5p0);
		
		n_out3p0 = n_out5p0;
	}

// Output:0
	NORMAL = n_out3p0;

}

void fragment() {
// Expression:25
	float n_out25p0;
	n_out25p0 = 0.0;
	{
		n_out25p0 = slopeGradient
	}

// ScalarFunc:26
	float n_out26p0 = abs(n_out25p0);

// Input:20
	mat4 n_out20p0 = CAMERA_MATRIX;

// Input:17
	vec3 n_out17p0 = VERTEX;

// TransformVectorMult:21
	vec3 n_out21p0 = (n_out20p0 * vec4(n_out17p0, 1.0)).xyz;

// VectorDecompose:18
	float n_out18p0 = n_out21p0.x;
	float n_out18p1 = n_out21p0.y;
	float n_out18p2 = n_out21p0.z;

// Color:10
	vec3 n_out10p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out10p1 = 1.000000;

// Color:6
	vec3 n_out6p0 = vec3(0.614750, 0.376667, 0.252509);
	float n_out6p1 = 1.000000;

// Color:7
	vec3 n_out7p0 = vec3(0.194531, 0.464844, 0.128922);
	float n_out7p1 = 1.000000;

// If:4
	float n_in4p1 = 10.00000;
	float n_in4p2 = 0.00000;
	vec3 n_in4p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0;
	if(abs(n_out18p1 - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_in4p3;
	}
	else if(n_out18p1 < n_in4p1)
	{
		n_out4p0 = n_out7p0;
	}
	else
	{
		n_out4p0 = n_out6p0;
	}

// If:9
	float n_in9p1 = 20.00000;
	float n_in9p2 = 0.00001;
	vec3 n_in9p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0;
	if(abs(n_out18p1 - n_in9p1) < n_in9p2)
	{
		n_out9p0 = n_in9p3;
	}
	else if(n_out18p1 < n_in9p1)
	{
		n_out9p0 = n_out4p0;
	}
	else
	{
		n_out9p0 = n_out10p0;
	}

// Color:15
	vec3 n_out15p0 = vec3(0.195313, 0.195313, 0.195313);
	float n_out15p1 = 1.000000;

// If:11
	float n_in11p1 = 0.75000;
	float n_in11p2 = 0.00000;
	vec3 n_in11p3 = vec3(1.00000, 0.00000, 1.00000);
	vec3 n_out11p0;
	if(abs(n_out26p0 - n_in11p1) < n_in11p2)
	{
		n_out11p0 = n_in11p3;
	}
	else if(n_out26p0 < n_in11p1)
	{
		n_out11p0 = n_out15p0;
	}
	else
	{
		n_out11p0 = n_out9p0;
	}

// Output:0
	ALBEDO = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -756, -44 )
nodes/vertex/0/position = Vector2( 500, 80 )
nodes/vertex/2/node = SubResource( 17 )
nodes/vertex/2/position = Vector2( -280, -220 )
nodes/vertex/2/size = Vector2( 733, 133 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = ""
nodes/vertex/2/expression = "varying float slopeGradient;"
nodes/vertex/3/node = SubResource( 18 )
nodes/vertex/3/position = Vector2( -260, 80 )
nodes/vertex/3/size = Vector2( 714, 313 )
nodes/vertex/3/input_ports = "0,3,world;1,1,normal;"
nodes/vertex/3/output_ports = "0,1,result;"
nodes/vertex/3/expression = "vec3 worldNormal = vec3(0.0, 1.0, 0.0);
slopeGradient = dot(vec4(vec4(worldNormal, 1.0) * world).xyz, normal);

result = normal;"
nodes/vertex/4/node = SubResource( 19 )
nodes/vertex/4/position = Vector2( -479.25, 33 )
nodes/vertex/5/node = SubResource( 20 )
nodes/vertex/5/position = Vector2( -446.25, 161 )
nodes/vertex/connections = PoolIntArray( 4, 0, 3, 0, 5, 0, 3, 1, 3, 0, 0, 1 )
nodes/fragment/0/position = Vector2( 740, 20 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -60, -60 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( -260, 0 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( -260, 100 )
nodes/fragment/9/node = SubResource( 16 )
nodes/fragment/9/position = Vector2( 160, -340 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 0, -240 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 420, 140 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 240, 280 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -820, -260 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -240, -320 )
nodes/fragment/20/node = SubResource( 8 )
nodes/fragment/20/position = Vector2( -700, -320 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( -500, -320 )
nodes/fragment/25/node = SubResource( 21 )
nodes/fragment/25/position = Vector2( -340, 220 )
nodes/fragment/25/size = Vector2( 285, 180 )
nodes/fragment/25/input_ports = ""
nodes/fragment/25/output_ports = "0,0,res;"
nodes/fragment/25/expression = "res = slopeGradient"
nodes/fragment/26/node = SubResource( 22 )
nodes/fragment/26/position = Vector2( -20, 260 )
nodes/fragment/connections = PoolIntArray( 4, 0, 9, 5, 10, 0, 9, 4, 6, 0, 4, 4, 7, 0, 4, 5, 18, 1, 4, 0, 18, 1, 9, 0, 20, 0, 21, 0, 17, 0, 21, 1, 21, 0, 18, 0, 11, 0, 0, 0, 15, 0, 11, 5, 25, 0, 26, 0, 9, 0, 11, 4, 26, 0, 11, 0 )
