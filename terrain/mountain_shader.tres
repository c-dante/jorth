[gd_resource type="VisualShader" load_steps=18 format=2]

[ext_resource path="res://terrain/heightmap_norm.tres" type="Texture" id=1]
[ext_resource path="res://terrain/heightmap.tres" type="Texture" id=2]

[sub_resource type="VisualShaderNodeColorConstant" id=20]

[sub_resource type="VisualShaderNodeIf" id=21]
default_input_values = [ 0, 0.0, 1, 0.125, 2, 0.0, 3, Vector3( 1, 0, 1 ), 4, Vector3( 1, 0, 0 ), 5, Vector3( 0, 0, 1 ) ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=22]

[sub_resource type="VisualShaderNodeScalarFunc" id=23]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeColorConstant" id=24]
constant = Color( 0.195313, 0.195313, 0.195313, 1 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 1 )
texture_type = 2

[sub_resource type="VisualShaderNodeIf" id=11]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 0.0, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeColorConstant" id=13]
constant = Color( 0.61475, 0.376667, 0.252509, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.194531, 0.464844, 0.128922, 1 )

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeIf" id=19]
default_input_values = [ 0, 0.0, 1, 0.7, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 25, 0 ) ]
operator = 2

[resource]
code = "shader_type spatial;
uniform sampler2D tex_vtx_3;
uniform sampler2D tex_frg_2 : hint_normal;
uniform sampler2D tex_frg_8;



void vertex() {
// Texture:3
	vec4 tex_vtx_3_read = texture(tex_vtx_3, UV.xy);
	vec3 n_out3p0 = tex_vtx_3_read.rgb;
	float n_out3p1 = tex_vtx_3_read.a;

// VectorOp:5
	vec3 n_in5p1 = vec3(0.00000, 25.00000, 0.00000);
	vec3 n_out5p0 = n_out3p0 * n_in5p1;

// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorOp:4
	vec3 n_out4p0 = n_out5p0 + n_out2p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorDecompose:13
	float n_out13p0 = n_out2p0.x;
	float n_out13p1 = n_out2p0.y;
	float n_out13p2 = n_out2p0.z;

// ScalarFunc:14
	float n_out14p0 = acos(n_out13p2);

// Color:15
	vec3 n_out15p0 = vec3(0.195313, 0.195313, 0.195313);
	float n_out15p1 = 1.000000;

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Color:10
	vec3 n_out10p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out10p1 = 1.000000;

// Color:6
	vec3 n_out6p0 = vec3(0.614750, 0.376667, 0.252509);
	float n_out6p1 = 1.000000;

// Color:7
	vec3 n_out7p0 = vec3(0.194531, 0.464844, 0.128922);
	float n_out7p1 = 1.000000;

// If:4
	float n_in4p1 = 0.50000;
	float n_in4p2 = 0.00000;
	vec3 n_in4p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0;
	if(abs(dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_in4p3;
	}
	else if(dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) < n_in4p1)
	{
		n_out4p0 = n_out7p0;
	}
	else
	{
		n_out4p0 = n_out6p0;
	}

// If:9
	float n_in9p1 = 0.70000;
	float n_in9p2 = 0.00001;
	vec3 n_in9p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0;
	if(abs(dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) - n_in9p1) < n_in9p2)
	{
		n_out9p0 = n_in9p3;
	}
	else if(dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) < n_in9p1)
	{
		n_out9p0 = n_out4p0;
	}
	else
	{
		n_out9p0 = n_out10p0;
	}

// If:11
	float n_in11p1 = 0.12500;
	float n_in11p2 = 0.00000;
	vec3 n_in11p3 = vec3(1.00000, 0.00000, 1.00000);
	vec3 n_out11p0;
	if(abs(n_out14p0 - n_in11p1) < n_in11p2)
	{
		n_out11p0 = n_in11p3;
	}
	else if(n_out14p0 < n_in11p1)
	{
		n_out11p0 = n_out9p0;
	}
	else
	{
		n_out11p0 = n_out15p0;
	}

// Output:0
	ALBEDO = n_out11p0;
	NORMALMAP = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -527.152, -244.376 )
nodes/vertex/2/node = SubResource( 1 )
nodes/vertex/2/position = Vector2( -360, 300 )
nodes/vertex/3/node = SubResource( 2 )
nodes/vertex/3/position = Vector2( -360, 20 )
nodes/vertex/4/node = SubResource( 3 )
nodes/vertex/4/position = Vector2( 80, 240 )
nodes/vertex/5/node = SubResource( 18 )
nodes/vertex/5/position = Vector2( -160, 120 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 1, 4, 0, 0, 0, 3, 0, 5, 0, 5, 0, 4, 0 )
nodes/fragment/0/position = Vector2( 600, 100 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -160, 360 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -60, -60 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -320, 160 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -320, 60 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( -340, -320 )
nodes/fragment/9/node = SubResource( 19 )
nodes/fragment/9/position = Vector2( 160, -340 )
nodes/fragment/10/node = SubResource( 20 )
nodes/fragment/10/position = Vector2( 0, -200 )
nodes/fragment/11/node = SubResource( 21 )
nodes/fragment/11/position = Vector2( 420, -140 )
nodes/fragment/13/node = SubResource( 22 )
nodes/fragment/13/position = Vector2( 60, 320 )
nodes/fragment/14/node = SubResource( 23 )
nodes/fragment/14/position = Vector2( 140, 120 )
nodes/fragment/15/node = SubResource( 24 )
nodes/fragment/15/position = Vector2( 221.848, -119.376 )
nodes/fragment/connections = PoolIntArray( 8, 0, 4, 0, 2, 0, 0, 8, 8, 0, 9, 0, 4, 0, 9, 5, 11, 0, 0, 0, 2, 0, 13, 0, 14, 0, 11, 0, 13, 2, 14, 0, 9, 0, 11, 5, 15, 0, 11, 4, 10, 0, 9, 4, 6, 0, 4, 4, 7, 0, 4, 5 )
